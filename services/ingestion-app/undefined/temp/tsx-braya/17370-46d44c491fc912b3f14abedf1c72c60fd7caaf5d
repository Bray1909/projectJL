{"code":"(()=>{\n\"use strict\";var __create=Object.create;var __defProp=Object.defineProperty;var __getOwnPropDesc=Object.getOwnPropertyDescriptor;var __getOwnPropNames=Object.getOwnPropertyNames;var __getProtoOf=Object.getPrototypeOf;var __hasOwnProp=Object.prototype.hasOwnProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});var __export=(target,all)=>{for(var name in all)__defProp(target,name,{get:all[name],enumerable:true})};var __copyProps=(to,from,except,desc)=>{if(from&&typeof from===\"object\"||typeof from===\"function\"){for(let key of __getOwnPropNames(from))if(!__hasOwnProp.call(to,key)&&key!==except)__defProp(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc(from,key))||desc.enumerable})}return to};var __toESM=(mod,isNodeMode,target)=>(target=mod!=null?__create(__getProtoOf(mod)):{},__copyProps(isNodeMode||!mod||!mod.__esModule?__defProp(target,\"default\",{value:mod,enumerable:true}):target,mod));var __toCommonJS=mod=>__copyProps(__defProp({},\"__esModule\",{value:true}),mod);var ingestion_exports={};__export(ingestion_exports,{handler:()=>handler});module.exports=__toCommonJS(ingestion_exports);var import_axios=__toESM(require(\"axios\"));var import_aws_sdk=__toESM(require(\"aws-sdk\"));var import_dotenv=__toESM(require(\"dotenv\"));if(!process.env.LAMBDA_TASK_ROOT){import_dotenv.default.config()}import_aws_sdk.default.config.update({region:process.env.AWS_REGION});const s3=new import_aws_sdk.default.S3;const ssm=new import_aws_sdk.default.SSM;async function handler(event){try{const getParameter=__name(async name=>{try{const param=await ssm.getParameter({Name:name,WithDecryption:true}).promise();if(!param.Parameter||!param.Parameter.Value){throw new Error(`Parameter ${name} not found or has no value`)}return param.Parameter.Value}catch(error){console.error(`Error fetching parameter ${name}:`,error);throw new Error(`Unable to retrieve parameter ${name}`)}},\"getParameter\");const bucketName=await getParameter(\"/serverless-framework/BUCKET_NAME\");const apiUrl=await getParameter(\"/serverless-framework/API_URL\");const apiKey=await getParameter(\"/serverless-framework/API_KEY\");if(!bucketName||!apiUrl||!apiKey){throw new Error(\"Missing required environment variables\")}const response=await import_axios.default.get(`${apiUrl}?key=${apiKey}`);const data=response.data;const keyName=`data-${Date.now()}.json`;await s3.putObject({Bucket:bucketName,Key:keyName,Body:JSON.stringify(data),ContentType:\"application/json\"}).promise();console.log(\"Data successfully uploaded to S3\");return{statusCode:200,body:JSON.stringify({message:\"Data ingested and stored successfully\",keyName})}}catch(error){console.error(\"Error during data ingestion:\",error);return{statusCode:500,body:JSON.stringify({message:\"Error during data ingestion\",error})}}}__name(handler,\"handler\");0&&(module.exports={handler});\n})()\n","warnings":[],"map":{"version":3,"mappings":";8/BAAA,2IAAkB,0BAClB,mBAAgB,4BAChB,kBAAmB,2BAGnB,GAAI,CAAC,QAAQ,IAAI,iBAAkB,CACjC,cAAAA,QAAO,OAAO,CAChB,CAGA,eAAAC,QAAI,OAAO,OAAO,CAAE,OAAQ,QAAQ,IAAI,UAAW,CAAC,EAGpD,MAAM,GAAK,IAAI,eAAAA,QAAI,GACnB,MAAM,IAAM,IAAI,eAAAA,QAAI,IAEpB,eAAsB,QAAQ,MAAY,CACxC,GAAI,CAEF,MAAM,aAAe,aAAO,MAAiB,CAC3C,GAAI,CACF,MAAM,MAAQ,MAAM,IAAI,aAAa,CAAE,KAAM,KAAM,eAAgB,IAAK,CAAC,EAAE,QAAQ,EAEnF,GAAI,CAAC,MAAM,WAAa,CAAC,MAAM,UAAU,MAAO,CAC9C,MAAM,IAAI,MAAM,aAAa,IAAI,4BAA4B,CAC/D,CAEA,OAAO,MAAM,UAAU,KACzB,OAAS,MAAO,CACd,QAAQ,MAAM,4BAA4B,IAAI,IAAK,KAAK,EACxD,MAAM,IAAI,MAAM,gCAAgC,IAAI,EAAE,CACxD,CACF,EAbqB,gBAerB,MAAM,WAAa,MAAM,aAAa,mCAAmC,EACzE,MAAM,OAAS,MAAM,aAAa,+BAA+B,EACjE,MAAM,OAAS,MAAM,aAAa,+BAA+B,EAEjE,GAAI,CAAC,YAAc,CAAC,QAAU,CAAC,OAAQ,CACrC,MAAM,IAAI,MAAM,wCAAwC,CAC1D,CAEA,MAAM,SAAW,MAAM,aAAAC,QAAM,IAAI,GAAG,MAAM,QAAQ,MAAM,EAAE,EAC1D,MAAM,KAAO,SAAS,KACtB,MAAM,QAAU,QAAQ,KAAK,IAAI,CAAC,QAElC,MAAM,GACH,UAAU,CACT,OAAQ,WACR,IAAK,QACL,KAAM,KAAK,UAAU,IAAI,EACzB,YAAa,kBACf,CAAC,EACA,QAAQ,EAEX,QAAQ,IAAI,kCAAkC,EAE9C,MAAO,CACL,WAAY,IACZ,KAAM,KAAK,UAAU,CAAE,QAAS,wCAAyC,OAAQ,CAAC,CACpF,CACF,OAAS,MAAO,CACd,QAAQ,MAAM,+BAAgC,KAAK,EACnD,MAAO,CACL,WAAY,IACZ,KAAM,KAAK,UAAU,CAAE,QAAS,8BAA+B,KAAa,CAAC,CAC/E,CACF,CACF,CApDsB","names":["dotenv","AWS","axios"],"ignoreList":[],"sources":["C:\\Users\\braya\\Downloads\\pruebaTecnica\\projectJL\\services\\ingestion-app\\src\\app\\functions\\ingestion.ts"],"sourcesContent":[null]}}